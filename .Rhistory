} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muSS[1],N)
mulo <- rep(muSS[2],N)
muhn <- rep(muSS[3],N)
muln <- rep(muSS[4],N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
dmulo
dmuhn
dmuho
source('~/assignment4_dynamic_search.R', echo=TRUE)
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muSS[1],N)
mulo <- rep(muSS[2],N)
muhn <- rep(muSS[3],N)
muln <- rep(muSS[4],N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2==0) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muSS[1],N)
mulo <- rep(muSS[2],N)
muhn <- rep(muSS[3],N)
muln <- rep(muSS[4],N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2==0) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
plot(1:N,muhn,type='l',ylim=c(0,1))
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
plot(1:N,muhn,type='l',ylim=c(0,1))
#set the parameters of the simulation
#max sample path:
N <- 25
#set the parameters of the simulation
#max sample path:
N <- 25
#steady state tolerance
dtol <- 10^(-8)
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muSS[1],N)
mulo <- rep(muSS[2],N)
muhn <- rep(muSS[3],N)
muln <- rep(muSS[4],N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
#steady state tolerance
dtol <- 10^(-6)
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muSS[1],N)
mulo <- rep(muSS[2],N)
muhn <- rep(muSS[3],N)
muln <- rep(muSS[4],N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
###output the path of the system to a new steady state
#drop the supply in half:
s <- s/2
muho1 <- muSS[1]/2
mulo1 <- muSS[2]/2
muhn1 <- muSS[3] + muSS[1]/2
muln1 <- muSS[4] + muSS[2]/2
#set the parameters of the simulation
#max sample path:
N <- 25
#steady state tolerance
dtol <- 10^(-6)
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muho1,N)
mulo <- rep(mulo1,N)
muhn <- rep(muhn1,N)
muln <- rep(muln1,N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muhn,type='l',ylim=c(0,1))
plot(1:N,muhn,type='l')
lines(1:N,mulo,col='blue')
plot(1:N,muho,type='l')
lines(1:N,mulo,col='blue')
plot(1:N,muho,type='l')
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
plot(1:N,muho,type='l',ylim=c(0,1))
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
tSS <- t
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN'))
legend('topleft',
c('HO','LO','HN','LN'),
c(1,1,1,1))
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c())
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3))
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta'))
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
plot(1:N,muho,type='l',ylim=c(0,2))
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
plot(1:N,muho,type='l',ylim=c(-0.2,1.2))
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
plot(1:N,muho,type='l',ylim=c(0.0,1.4))
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
plot(1:N,muho,type='l',ylim=c(0.0,1.4),xlab='time',ylab='masses')
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
legend('outtopleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
print(message)
###set the parameters of the model
#strucure:
s     <- 0.3 #the share of supply (=muho+mulo)
#dynamics:
lam   <- 0.05 #intensity of meetings between LO and HO (lambda)
lamu  <- 0.1 #intensity of LO->HO type switch (lambda_u)
lamd  <- 0.05 #intensity of HO->LO type switch (lambda_d)
###solve for steady state
#function to solve
ss <- function(mu,s,lam,lamd,lamu) {
muho <- mu[1]
mulo <- mu[2]
muhn <- mu[3]
muln <- mu[4]
c(-lam*muhn*muln-lamu*mulo+lamd*muhn,
-lam*muhn*muln-lamd*muhn+lamu*muln,
muhn+muln-(1-s),
muho+mulo-s)
}
#starting point:
muho0 <- s/2 #starting share of HO
mulo0 <- s/2 #starting share of LO
muhn0 <- (1-s)/2 #starting share of HN
muln0 <- (1-s)/2 #starting share of LN
mu0 <- c(muho0,mulo0,muhn0,muln0)
#solve for steady state
#install.packages("nleqslv")
library(nleqslv)
muSS <- nleqslv(mu0, function(mu) ss(mu,s,lam,lamd,lamu))$x
#the steady state structure:
print(muSS)
muhn[N]
###set the parameters of the model
#strucure:
s     <- 0.3 #the share of supply (=muho+mulo)
#dynamics:
lam   <- 0.05 #intensity of meetings between LO and HO (lambda)
lamu  <- 0.1 #intensity of LO->HO type switch (lambda_u)
lamd  <- 0.05 #intensity of HO->LO type switch (lambda_d)
###solve for steady state
#function to solve
ss <- function(mu,s,lam,lamd,lamu) {
muho <- mu[1]
mulo <- mu[2]
muhn <- mu[3]
muln <- mu[4]
c(-lam*muhn*muln-lamu*mulo+lamd*muhn,
-lam*muhn*muln-lamd*muhn+lamu*muln,
muhn+muln-(1-s),
muho+mulo-s)
}
#starting point:
muho0 <- s/2 #starting share of HO
mulo0 <- s/2 #starting share of LO
muhn0 <- (1-s)/2 #starting share of HN
muln0 <- (1-s)/2 #starting share of LN
mu0 <- c(muho0,mulo0,muhn0,muln0)
#solve for steady state
#install.packages("nleqslv")
library(nleqslv)
muSS <- nleqslv(mu0, function(mu) ss(mu,s,lam,lamd,lamu))$x
#the steady state structure:
print(muSS)
###output the path of the system to a new steady state
#drop the supply in half:
s <- s/2
muho1 <- muSS[1]/2
mulo1 <- muSS[2]/2
muhn1 <- muSS[3] + muSS[1]/2
muln1 <- muSS[4] + muSS[2]/2
#set the parameters of the simulation
#max sample path:
N <- 25
#steady state tolerance
dtol <- 10^(-6)
###simulate the model
#initiate the trajectories at the old steady state:
muho <- rep(muho1,N)
mulo <- rep(mulo1,N)
muhn <- rep(muhn1,N)
muln <- rep(muln1,N)
#simulate the paths according to the system dynamics conditions
for(t in 2:N) {
dmulo <- -lam*muhn[t-1]*mulo[t]-lamu*mulo[t-1]+lamd*muho[t-1]
dmuhn <- -lam*muhn[t-1]*mulo[t]-lamd*muhn[t-1]+lamu*muln[t-1]
dmuho <- +lam*muhn[t-1]*mulo[t]-lamd*muho[t-1]+lamu*mulo[t-1]
dmuln <- +lam*muhn[t-1]*mulo[t]-lamu*muln[t-1]+lamd*muhn[t-1]
if(dmulo^2+dmuhn^2+dmuho^2+dmuln^2<=dtol) {
muho[t:N] <- muho[t-1]
mulo[t:N] <- mulo[t-1]
muhn[t:N] <- muhn[t-1]
muln[t:N] <- muln[t-1]
message <- paste('steady state from t=',t-1,sep='')
tSS <- t
break
} else {
muho[t] <- muho[t-1]+dmuho
mulo[t] <- mulo[t-1]+dmulo
muhn[t] <- muhn[t-1]+dmuhn
muln[t] <- muln[t-1]+dmuln
if(t==N) {
message='no convergence before maximum path length'
}
}
}
print(message)
plot(1:N,muho,type='l',ylim=c(0.0,1.4),xlab='time',ylab='masses')
lines(1:N,mulo,col='blue')
lines(1:N,muhn,col='red')
lines(1:N,muln,col='magenta')
abline(v=tSS,col='gray',lwd=3,lty=3)
legend('topleft',
c('HO','LO','HN','LN','new SS'),
lty=c(1,1,1,1,3),
lwd=c(1,1,1,1,3),
col=c('black','blue','red','magenta','gray'))
muhn[N]
muhn[N]
muho[N]
mulo[N]
muln[N]
muhn[N]+muho[N]+mulo[N]+muln[N]
list1 <- list(1,2,3,4)
list2 <- list(TRUE,FALSE,TRUE,FALSE)
list1[list2==FALSE]
xplot <- seq(0,1,100)
xplot
xplot <- seq(0,1,length.out=100)
xplot
y = y(xplot)
y <- function(x) (1-x)^3
xplot <- seq(0,1,length.out=100)
y = y(xplot)
y
plot(x,y)
y <- function(x) (1-x)^3
xplot <- seq(0,1,length.out=100)
yplot = y(xplot)
plot(x,y)
plot(xplot,yplot)
knit_with_parameters('~/R/erg0112/slides.Rmd', encoding = 'UTF-8')
library(lattice)
dtapar <- data.frame(x1=c(6,1,4,2), x2=c(5,2,4,2), x3=c(4,3,6,2), x4=c(3,4,4,3))
lattice::parallelplot(dtapar)
?include_graphics
.center_img[
![]("stuff/iid01.png")
]
install.packages(c("ade4", "ARDL", "arsenal", "backports", "BH", "caTools", "colorspace", "copula", "cowplot", "cpp11", "crosstalk", "data.table", "diffobj", "doParallel", "dplyr", "DT", "e1071", "expm", "fansi", "foreach", "generics", "ggplot2", "ggpubr", "ggrepel", "glue", "gower", "gplots", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "iterators", "knitr", "labeling", "later", "lava", "lifecycle", "lme4", "lubridate", "magrittr", "Matrix", "mclust", "mime", "mnormt", "mvtnorm", "nloptr", "openssl", "openxlsx", "pbkrtest", "pillar", "plotly", "plyr", "prettyunits", "pROC", "promises", "psych", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "reshape2", "reticulate", "rJava", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "scales", "segmented", "seqinr", "servr", "sn", "sp", "SQUAREM", "stringi", "sys", "tibble", "tidyr", "tidyselect", "tinytex", "tseries", "vctrs", "VGAM", "withr", "xaringan", "xfun", "xml2", "yaml"))
setwd("~/R/jan21pan")
